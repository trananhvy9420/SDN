<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin - Quản lý Cầu thủ</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      body {
        font-family: "Inter", sans-serif;
      }
      .modal-backdrop {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 40;
        justify-content: center;
        align-items: center;
      }
      .modal {
        transform: scale(0.95);
        opacity: 0;
        transition: transform 0.2s ease-out, opacity 0.2s ease-out;
        max-height: 90vh;
        overflow-y: auto;
      }
      .modal-backdrop.flex {
        display: flex;
      }
      .modal-backdrop.flex .modal {
        transform: scale(1);
        opacity: 1;
      }
      table img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 50%;
      }
      .info-cell {
        max-width: 200px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    </style>
  </head>
  <body class="bg-gray-100 text-gray-800">
    <%- include('partials/header', { isLoggedIn: true }) %>
    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
      <header class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">
          Bảng điều khiển quản lý Cầu thủ
        </h1>
      </header>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div
          id="card-all"
          class="bg-blue-500 text-white rounded-xl shadow-lg p-6 flex items-center justify-between cursor-pointer transform transition-transform hover:scale-105"
        >
          <div>
            <p class="text-sm font-medium uppercase tracking-wider">
              Tổng Cầu Thủ
            </p>
            <p id="totalPlayersStat" class="text-4xl font-bold mt-1">...</p>
          </div>
          <div class="text-blue-200">
            <i class="fas fa-users fa-3x"></i>
          </div>
        </div>

        <div
          id="card-active"
          class="bg-green-500 text-white rounded-xl shadow-lg p-6 flex items-center justify-between cursor-pointer transform transition-transform hover:scale-105"
        >
          <div>
            <p class="text-sm font-medium uppercase tracking-wider">
              Hoạt Động
            </p>
            <p id="activePlayersStat" class="text-4xl font-bold mt-1">...</p>
          </div>
          <div class="text-green-200">
            <i class="fas fa-user-check fa-3x"></i>
          </div>
        </div>

        <div
          id="card-disabled"
          class="bg-gray-700 text-white rounded-xl shadow-lg p-6 flex items-center justify-between cursor-pointer transform transition-transform hover:scale-105"
        >
          <div>
            <p class="text-sm font-medium uppercase tracking-wider">
              Vô Hiệu Hóa
            </p>
            <p id="disabledPlayersStat" class="text-4xl font-bold mt-1">...</p>
          </div>
          <div class="text-gray-400">
            <i class="fas fa-user-slash fa-3x"></i>
          </div>
        </div>
      </div>
      <div class="bg-white rounded-lg shadow-md p-6">
        <div
          class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4"
        >
          <div class="w-full sm:w-auto">
            <h2 class="text-2xl font-semibold text-gray-800">
              Danh sách Cầu thủ
            </h2>
          </div>

          <div class="w-full sm:w-1/2 lg:w-1/3">
            <form id="searchForm" class="flex items-center">
              <input
                type="text"
                id="searchInput"
                placeholder="Tìm kiếm theo tên cầu thủ..."
                class="w-full px-3 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <button
                type="submit"
                class="bg-blue-600 text-white px-4 py-2 rounded-r-lg hover:bg-blue-700 transition-colors"
                title="Tìm kiếm"
              >
                <i class="fas fa-search"></i>
              </button>
              <button
                type="button"
                id="clearSearchBtn"
                title="Xóa tìm kiếm"
                class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors ml-2"
              >
                <i class="fas fa-times"></i>
              </button>
            </form>
          </div>

          <div class="w-full sm:w-auto">
            <button
              id="openCreateModalBtn"
              class="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center"
            >
              <i class="fas fa-plus mr-2"></i> Tạo Cầu thủ mới
            </button>
          </div>
        </div>

        <div class="overflow-x-auto">
          <table class="min-w-full bg-white border border-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="text-left py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Ảnh
                </th>
                <th
                  class="text-left py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Tên Cầu thủ
                </th>
                <th
                  class="text-left py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Thông tin
                </th>
                <th
                  class="text-left py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Giá
                </th>
                <th
                  class="text-left py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Đội
                </th>
                <th
                  class="text-center py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Đội trưởng
                </th>
                <th
                  class="text-center py-3 px-4 font-semibold text-gray-600 border-b"
                >
                  Hành động
                </th>
              </tr>
            </thead>
            <tbody id="playerTableBody"></tbody>
          </table>
          <div
            id="no-data-message"
            class="text-center py-10 text-gray-500 hidden"
          >
            <p>Không tìm thấy cầu thủ nào.</p>
          </div>
        </div>

        <div
          id="paginationControls"
          class="flex justify-between items-center mt-6"
        ></div>
      </div>
    </div>

    <div id="playerModal" class="modal-backdrop">
      <div
        class="modal bg-white rounded-lg shadow-xl w-11/12 md:max-w-2xl mx-auto p-6"
      >
        <h3 id="modalTitle" class="text-xl font-semibold mb-6">
          Tạo Cầu thủ mới
        </h3>
        <form id="playerForm">
          <input type="hidden" id="playerId" />
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label
                for="playerName"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Tên Cầu thủ</label
              >
              <input
                type="text"
                id="playerName"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
            <div>
              <label
                for="cost"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Giá</label
              >
              <input
                type="number"
                id="cost"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
            <div class="md:col-span-2">
              <label
                for="image"
                class="block text-sm font-medium text-gray-700 mb-1"
                >URL Hình ảnh</label
              >
              <input
                type="url"
                id="image"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="https://example.com/image.png"
                required
              />
            </div>
            <div class="md:col-span-2">
              <label
                for="information"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Thông tin</label
              >
              <textarea
                id="information"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              ></textarea>
            </div>
            <div>
              <label
                for="team"
                class="block text-sm font-medium text-gray-700 mb-1"
                >Đội</label
              >
              <select
                id="team"
                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              ></select>
            </div>
            <div class="flex items-center justify-start mt-2">
              <input
                type="checkbox"
                id="isCaptain"
                class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
              />
              <label for="isCaptain" class="ml-2 block text-sm text-gray-900"
                >Là đội trưởng?</label
              >
            </div>
          </div>
          <div
            id="modalApiError"
            class="text-red-500 text-sm my-4 text-center"
          ></div>
          <div class="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              id="cancelModalBtn"
              class="bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors"
            >
              Hủy
            </button>
            <button
              type="submit"
              id="savePlayerBtn"
              class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors"
            >
              Lưu
            </button>
          </div>
        </form>
      </div>
    </div>

    <div id="deleteConfirmModal" class="modal-backdrop">
      <div
        class="modal bg-white rounded-lg shadow-xl w-11/12 md:max-w-md mx-auto p-6"
      >
        <h3 class="text-xl font-semibold mb-2">Xác nhận xóa</h3>
        <p class="text-gray-600 mb-6">
          Bạn có chắc chắn muốn xóa cầu thủ này không?
        </p>
        <div class="flex justify-end space-x-3">
          <button
            id="cancelDeleteBtn"
            class="bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300"
          >
            Hủy
          </button>
          <button
            id="confirmDeleteBtn"
            class="bg-red-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-red-700"
          >
            Xóa
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // --- API & Constants ---
        const API_BASE_URL = "/api";
        const limit = 8;

        // --- DOM Elements ---
        const playerTableBody = document.getElementById("playerTableBody");
        const paginationControls =
          document.getElementById("paginationControls");
        const noDataMessage = document.getElementById("no-data-message");

        // Cards
        const cardAll = document.getElementById("card-all");
        const cardActive = document.getElementById("card-active");
        const cardDisabled = document.getElementById("card-disabled");

        // Search
        const searchForm = document.getElementById("searchForm");
        const searchInput = document.getElementById("searchInput");
        const clearSearchBtn = document.getElementById("clearSearchBtn");

        // Modals & Forms
        const openCreateModalBtn =
          document.getElementById("openCreateModalBtn");
        const playerModal = document.getElementById("playerModal");
        const deleteConfirmModal =
          document.getElementById("deleteConfirmModal");
        const cancelModalBtn = document.getElementById("cancelModalBtn");
        const cancelDeleteBtn = document.getElementById("cancelDeleteBtn");
        const playerForm = document.getElementById("playerForm");
        const modalTitle = document.getElementById("modalTitle");
        const confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
        const modalApiError = document.getElementById("modalApiError");

        // Form Fields
        const playerIdInput = document.getElementById("playerId");
        const playerNameInput = document.getElementById("playerName");
        const imageInput = document.getElementById("image");
        const costInput = document.getElementById("cost");
        const isCaptainInput = document.getElementById("isCaptain");
        const informationInput = document.getElementById("information");
        const teamSelect = document.getElementById("team");

        // --- State Management ---
        let playerToDeleteId = null;
        let currentPage = 1;
        let playersDataCache = {};
        let filters = {
          status: "active", // 'active', 'disabled', 'all'
          searchQuery: "",
        };

        // --- Axios Instance ---
        const api = axios.create({ baseURL: API_BASE_URL });
        api.interceptors.request.use(
          (config) => {
            const token = localStorage.getItem("access_token");
            if (token) {
              config.headers.Authorization = `Bearer ${token}`;
            }
            return config;
          },
          (error) => Promise.reject(error)
        );

        // --- API Functions ---

        /**
         * Hàm chính để lấy danh sách cầu thủ, hỗ trợ phân trang và tất cả các bộ lọc.
         */
        const fetchAndRenderPlayers = async (page = 1) => {
          currentPage = page;
          playerTableBody.innerHTML = `<tr><td colspan="7" class="text-center py-10">Đang tải...</td></tr>`;

          const params = new URLSearchParams({
            page: currentPage,
            limit: limit,
            status: filters.status,
          });

          if (filters.searchQuery) {
            params.append("playerName", filters.searchQuery);
          }

          try {
            const response = await api.get(
              `/player/getAll?${params.toString()}`
            );
            const result = response.data;
            renderTable(result.data || []);
            renderPagination(result.pagination || {});
          } catch (error) {
            handleApiError(error, "Không thể tải danh sách cầu thủ.");
          }
        };

        const fetchAndRenderStats = async () => {
          try {
            const response = await api.get("/player/stats");
            const stats = response.data.data;
            document.getElementById("totalPlayersStat").textContent =
              stats.totalPlayers;
            document.getElementById("activePlayersStat").textContent =
              stats.activePlayers;
            document.getElementById("disabledPlayersStat").textContent =
              stats.disabledPlayers;
          } catch (error) {
            console.error("Không thể tải dữ liệu thống kê:", error);
            [
              "totalPlayersStat",
              "activePlayersStat",
              "disabledPlayersStat",
            ].forEach((id) => {
              const el = document.getElementById(id);
              if (el) el.textContent = "N/A";
            });
          }
        };

        const fetchTeamsForSelect = async () => {
          try {
            const response = await api.get("/team/");
            populateTeamSelect(response.data.data || []);
          } catch (error) {
            handleApiError(error, "Không thể tải danh sách đội.");
          }
        };

        const savePlayer = async (playerData) => {
          const playerId = playerIdInput.value;
          modalApiError.textContent = "";
          try {
            const method = playerId ? "put" : "post";
            const url = playerId ? `/player/${playerId}` : "/player/";
            await api({ method, url, data: playerData });

            closeModal(playerModal);
            await fetchAndRenderPlayers(playerId ? currentPage : 1); // Về trang 1 nếu tạo mới
            await fetchAndRenderStats(); // Cập nhật lại thống kê
          } catch (error) {
            modalApiError.textContent =
              error.response?.data?.message || "Lưu cầu thủ thất bại.";
          }
        };

        const deletePlayer = async (id) => {
          try {
            await api.delete(`/player/${id}/delete`);
            closeModal(deleteConfirmModal);
            await fetchAndRenderPlayers(currentPage);
            await fetchAndRenderStats(); // Cập nhật lại thống kê
          } catch (error) {
            handleApiError(error, "Xóa cầu thủ thất bại.");
          }
        };

        // --- UI Rendering & Helpers ---

        const renderTable = (players) => {
          playerTableBody.innerHTML = "";
          playersDataCache = {};
          if (!players || players.length === 0) {
            noDataMessage.classList.remove("hidden");
            paginationControls.innerHTML = "";
            return;
          }
          noDataMessage.classList.add("hidden");
          players.forEach((player) => {
            playersDataCache[player._id] = player;
            const row = document.createElement("tr");
            row.className = `hover:bg-gray-50 ${
              player.disable ? "bg-red-50 text-gray-400" : ""
            }`;
            row.innerHTML = `
                    <td class="py-2 px-4 border-b"><img src="${
                      player.image
                    }" alt="${
              player.playerName
            }" onerror="this.onerror=null;this.src='https://placehold.co/100x100/EFEFEF/AAAAAA&text=N/A';"></td>
                    <td class="py-3 px-4 border-b font-medium ${
                      player.disable ? "line-through" : ""
                    }">${player.playerName}</td>
                    <td class="py-3 px-4 border-b info-cell" title="${
                      player.information
                    }">${player.information}</td>
                    <td class="py-3 px-4 border-b">${player.cost.toLocaleString(
                      "vi-VN"
                    )}</td>
                    <td class="py-3 px-4 border-b">${
                      player.team?.teamName ?? "N/A"
                    }</td>
                    <td class="py-3 px-4 border-b text-center">${
                      player.isCaptain
                        ? '<i class="fas fa-check-circle text-green-500"></i>'
                        : '<i class="fas fa-times-circle text-red-500"></i>'
                    }</td>
                    <td class="py-3 px-4 border-b text-center">
                        <button class="update-btn text-blue-500 hover:text-blue-700 mr-4" data-id="${
                          player._id
                        }" title="Chỉnh sửa"><i class="fas fa-edit"></i></button>
                        <button class="delete-btn text-red-500 hover:text-red-700" data-id="${
                          player._id
                        }" title="Xóa"><i class="fas fa-trash"></i></button>
                    </td>
                `;
            playerTableBody.appendChild(row);
          });
        };

        const updateCardStyles = () => {
          [cardAll, cardActive, cardDisabled].forEach((card) =>
            card.classList.remove("ring-4", "ring-white")
          );
          const activeCard = document.getElementById(`card-${filters.status}`);
          if (activeCard) activeCard.classList.add("ring-4", "ring-white");
        };

        const populateTeamSelect = (teams) => {
          teamSelect.innerHTML = '<option value="">-- Chọn đội --</option>';
          if (!teams) return;
          teams.forEach((team) => {
            const option = document.createElement("option");
            option.value = team._id;
            option.textContent = team.teamName;
            teamSelect.appendChild(option);
          });
        };

        const renderPagination = (pagination) => {
          paginationControls.innerHTML = "";
          if (!pagination || pagination.totalPages < 1) return;
          paginationControls.innerHTML = `
              <button class="px-3 py-1 rounded ${
                pagination.currentPage === 1
                  ? "bg-gray-200 cursor-not-allowed"
                  : "bg-white hover:bg-gray-100"
              }" data-page="${pagination.currentPage - 1}" ${
            pagination.currentPage === 1 ? "disabled" : ""
          }>Trước</button>
              <span class="px-4 text-sm">Trang ${pagination.currentPage} / ${
            pagination.totalPages
          }</span>
              <button class="px-3 py-1 rounded ${
                pagination.currentPage === pagination.totalPages
                  ? "bg-gray-200 cursor-not-allowed"
                  : "bg-white hover:bg-gray-100"
              }" data-page="${pagination.currentPage + 1}" ${
            pagination.currentPage === pagination.totalPages ? "disabled" : ""
          }>Sau</button>
          `;
        };

        const handleApiError = (error, defaultMessage) => {
          console.error(error);
          let message = defaultMessage;
          if (
            error.response?.status === 401 ||
            error.response?.status === 403
          ) {
            window.location.href = "/auth?form=login";
            return;
          } else if (error.response?.data?.message) {
            message = error.response.data.message;
          }
          playerTableBody.innerHTML = "";
          noDataMessage.innerHTML = `<p class="text-red-500">${message}</p>`;
          noDataMessage.classList.remove("hidden");
          paginationControls.innerHTML = "";
        };

        const openModal = (modal) => modal.classList.add("flex");
        const closeModal = (modal) => modal.classList.remove("flex");

        const openCreateForm = () => {
          playerForm.reset();
          playerIdInput.value = "";
          modalTitle.textContent = "Tạo Cầu thủ mới";
          modalApiError.textContent = "";
          openModal(playerModal);
        };

        const openUpdateForm = (id) => {
          const player = playersDataCache[id];
          if (!player) return;
          playerForm.reset();
          modalTitle.textContent = "Cập nhật Cầu thủ";
          modalApiError.textContent = "";

          playerIdInput.value = player._id;
          playerNameInput.value = player.playerName;
          imageInput.value = player.image;
          costInput.value = player.cost;
          informationInput.value = player.information;
          isCaptainInput.checked = player.isCaptain;
          teamSelect.value = player.team?._id || "";

          openModal(playerModal);
        };

        // --- Event Listeners ---

        openCreateModalBtn.addEventListener("click", openCreateForm);
        cancelModalBtn.addEventListener("click", () => closeModal(playerModal));
        cancelDeleteBtn.addEventListener("click", () =>
          closeModal(deleteConfirmModal)
        );

        confirmDeleteBtn.addEventListener("click", () => {
          if (playerToDeleteId) deletePlayer(playerToDeleteId);
        });

        playerForm.addEventListener("submit", (e) => {
          e.preventDefault();
          const formData = {
            playerName: playerNameInput.value,
            image: imageInput.value,
            cost: parseInt(costInput.value),
            information: informationInput.value,
            isCaptain: isCaptainInput.checked,
            team: teamSelect.value,
          };
          savePlayer(formData);
        });

        searchForm.addEventListener("submit", (e) => {
          e.preventDefault();
          filters.searchQuery = searchInput.value.trim();
          fetchAndRenderPlayers(1);
        });

        clearSearchBtn.addEventListener("click", () => {
          searchInput.value = "";
          filters.searchQuery = "";
          fetchAndRenderPlayers(1);
        });

        cardAll.addEventListener("click", () => {
          filters.status = "all";
          filters.searchQuery = ""; // Reset search on card click
          searchInput.value = "";
          updateCardStyles();
          fetchAndRenderPlayers(1);
        });

        cardActive.addEventListener("click", () => {
          filters.status = "active";
          filters.searchQuery = "";
          searchInput.value = "";
          updateCardStyles();
          fetchAndRenderPlayers(1);
        });

        cardDisabled.addEventListener("click", () => {
          filters.status = "disabled";
          filters.searchQuery = "";
          searchInput.value = "";
          updateCardStyles();
          fetchAndRenderPlayers(1);
        });

        playerTableBody.addEventListener("click", (e) => {
          const updateBtn = e.target.closest(".update-btn");
          const deleteBtn = e.target.closest(".delete-btn");
          if (updateBtn) openUpdateForm(updateBtn.dataset.id);
          if (deleteBtn) {
            playerToDeleteId = deleteBtn.dataset.id;
            openModal(deleteConfirmModal);
          }
        });

        paginationControls.addEventListener("click", (e) => {
          const paginationBtn = e.target.closest("button");
          if (paginationBtn && !paginationBtn.disabled) {
            fetchAndRenderPlayers(parseInt(paginationBtn.dataset.page));
          }
        });

        // --- Initializer ---
        const initializePage = async () => {
          if (!localStorage.getItem("access_token")) {
            window.location.href = "/auth?form=login";
            return;
          }
          updateCardStyles();
          await fetchTeamsForSelect();
          await fetchAndRenderPlayers();
          await fetchAndRenderStats();
        };

        initializePage();
      });
    </script>
  </body>
</html>
